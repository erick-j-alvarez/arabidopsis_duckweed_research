up_MF_ko_60_vs_0_GO <- GO_results(df_dds_ko_60_vs_0, "up", ont_category = "MF")
save_GO_results(up_MF_ko_60_vs_0_GO, "up")
down_MF_ko_60_vs_0_GO <- GO_results(df_dds_ko_60_vs_0, "down", ont_category = "MF")
save_GO_results(down_MF_ko_60_vs_0_GO, "down")
up_CC_ko_60_vs_0_GO <- GO_results(df_dds_ko_60_vs_0, "up", ont_category = "CC")
save_GO_results(up_CC_ko_60_vs_0_GO, "up")
down_CC_ko_60_vs_0_GO <- GO_results(df_dds_ko_60_vs_0, "down", ont_category = "CC")
save_GO_results(down_CC_ko_60_vs_0_GO, "down")
# KO_0 vs. KO_80
up_BP_ko_80_vs_0_GO <- GO_results(df_dds_ko_80_vs_0, "up")
save_GO_results(up_BP_ko_80_vs_0_GO, "up")
down_BP_ko_80_vs_0_GO <- GO_results(df_dds_ko_80_vs_0, "down")
save_GO_results(down_BP_ko_80_vs_0_GO, "down")
up_MF_ko_80_vs_0_GO <- GO_results(df_dds_ko_80_vs_0, "up", ont_category = "MF")
save_GO_results(up_MF_ko_80_vs_0_GO, "up")
down_MF_ko_80_vs_0_GO <- GO_results(df_dds_ko_80_vs_0, "down", ont_category = "MF")
save_GO_results(down_MF_ko_80_vs_0_GO, "down")
up_CC_ko_80_vs_0_GO <- GO_results(df_dds_ko_80_vs_0, "up", ont_category = "CC")
save_GO_results(up_CC_ko_80_vs_0_GO, "up")
down_CC_ko_80_vs_0_GO <- GO_results(df_dds_ko_80_vs_0, "down", ont_category = "CC")
save_GO_results(down_CC_ko_80_vs_0_GO, "down")
count_GO_terms <- function(data_file_path = "../data/arabidopsis_GO_results",
comparison_pattern,
up_regulated_data = "up_results",
down_regulated_data = "down_results") {
# define the GO categories
go_categories <- c("BP", "MF", "CC")
# initialize the results matrix
results_matrix <- matrix(0, nrow = length(go_categories), ncol = 2,
dimnames = list(go_categories, c("up", "down")))
# helper function used to process files in a given folder and direction ("up" or "down")
process_files <- function(folder, direction, results_matrix) {
for (category in go_categories) {
# build the exact file name pattern
file_pattern <- paste0(direction, "_", category, "_", comparison_pattern, "_GO.csv") # very exact to the naming convention used for the annotating genes step
# list out files matching the name pattern (should be only one per category (BP, MF, CC))
files <- list.files(folder, pattern = file_pattern, full.names = TRUE)
if (length(files) > 0) {
file <- files[1]  # take the initial match (should only be one anyways)
# read the matching CSV file
data <- read.csv(file, stringsAsFactors = FALSE)
# count rows where p.adjust < 0.05 (will match the number of significant GO Description terms); ignores NA values
count <- sum(data$p.adjust < 0.05, na.rm = TRUE)
# DEBUG: check the count and where it is being assigned
print(paste("Updating matrix for category:", category, "and direction:", direction))
print(paste("Count to assign:", count))
# store result in matrix
if (direction == "up") {
results_matrix[category, "up"] <- count
} else if (direction == "down") {
results_matrix[category, "down"] <- count
}
# DEBUG: display the matrix after each count assignment
print(results_matrix)
} else {
# if no files are found (i.e. incorrect pattern input), print a warning error
warning(paste("No matching file found for", direction, category, "in", folder))
}
}
return(results_matrix)  # return updated matrix
}
# define the output path
output_dir <- file.path(data_file_path, "GO_term_counts")
# create the directory (if it doesn't already exist)
dir.create(output_dir, showWarnings = FALSE)
# process both the "up" and "down" CSV file results
results_matrix <- process_files(file.path(data_file_path, up_regulated_data), "up", results_matrix)
results_matrix <- process_files(file.path(data_file_path, down_regulated_data), "down", results_matrix)
# DEBUG: display the final results matrix
print("Final results_matrix:")
print(results_matrix)
# define the output path and save the results once the entire matrix is complete
output_file <- file.path(output_dir, paste0(comparison_pattern, "_GO_counts.csv"))
write.csv(as.data.frame(results_matrix), output_file, row.names = TRUE)
}
# WT_20 vs. KO_20
count_GO_terms(comparison_pattern = "ko_20_vs_wt_20")
# WT_40 vs. KO_40
count_GO_terms(comparison_pattern = "ko_40_vs_wt_40")
# WT_60 vs. KO_60
count_GO_terms(comparison_pattern = "ko_60_vs_wt_60")
# WT_80 vs. KO_80
count_GO_terms(comparison_pattern = "ko_80_vs_wt_80")
# WT_0 vs. KO_0
count_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0")
# WT_0 vs. WT_20
count_GO_terms(comparison_pattern = "wt_20_vs_0")
# WT_0 vs. WT_40
count_GO_terms(comparison_pattern = "wt_40_vs_0")
# WT_0 vs. WT_60
count_GO_terms(comparison_pattern = "wt_60_vs_0")
# WT_0 vs. WT_80
count_GO_terms(comparison_pattern = "wt_80_vs_0")
# KO_0 vs. KO_20
count_GO_terms(comparison_pattern = "ko_20_vs_0")
# KO_0 vs. KO_40
count_GO_terms(comparison_pattern = "ko_40_vs_0")
# KO_0 vs. KO_60
count_GO_terms(comparison_pattern = "ko_60_vs_0")
# KO_0 vs. KO_80
count_GO_terms(comparison_pattern = "ko_80_vs_0")
plot_top_GO_terms <- function(data_file_path = "../data/arabidopsis_GO_results",
comparison_pattern,
top_n = 5,
up_regulated_data = "up_results",
down_regulated_data = "down_results") {
# define the GO categories
go_categories <- c("BP", "MF", "CC")
all_data <- data.frame()  # initialize a data frame to store all GO term info
# helper function used to process files in a given folder and direction ("up" or "down")
process_files <- function(folder, direction) {
category_data <- data.frame()  # initialize a data frame for the category info
for (category in go_categories) {
# build the exact file name pattern
file_pattern <- paste0(direction, "_", category, "_", comparison_pattern, "_GO.csv")
# list out files matching the name pattern (should be only one per category (BP, MF, CC))
files <- list.files(folder, pattern = file_pattern, full.names = TRUE)
# take the initial match (should only be one anyways)
if (length(files) > 0) {
data <- read.csv(files[1], stringsAsFactors = FALSE)
# filter the data only keep non-NA p.adjust values and create Category and Regulation columns
data <- data |>
dplyr::filter(!is.na(p.adjust)) |>
dplyr::mutate(Category = category, Regulation = direction)
# bind the data for a category to the category_data data frame
category_data <- dplyr::bind_rows(category_data, data)
} else {
# if no files are found (i.e. incorrect pattern input), print a warning error
warning(paste("No matching file found for", direction, category, "in", folder))
}
}
return(category_data)  # return the collected data for the given direction
}
# process both the "up" and "down" CSV file results
up_data <- process_files(file.path(data_file_path, up_regulated_data), "up")
down_data <- process_files(file.path(data_file_path, down_regulated_data), "down")
# combine the up-regulated and down-regulated data into a single data frame (in the form of all_data)
all_data <- dplyr::bind_rows(up_data, down_data)
# if no significant (< 0.05) GO terms are found, display error
if (nrow(all_data) == 0) {
stop("No significant GO terms found for given comparison pattern.")
}
# select the top 5 GO terms
top_go_data <- all_data |>
group_by(Category) |>
arrange(p.adjust) |>  # sort by smallest p.adjust to get the most significant terms (ascending order)
slice_head(n = top_n) |>   # select the top GO terms per category (choose how many when calling the function)
ungroup() |>
mutate(Label = paste0(ID, ": ", Description))  # create a label for each GO term (ID: Description)
# plot the top GO terms
ggplot(top_go_data, aes(x = reorder(Label, p.adjust), y = -log10(p.adjust), fill = Regulation)) +
geom_col(position = position_dodge(width = 0.7)) +  # use position_dodge to place up/down bars side by side
coord_flip() +  # flip coordinates so the bars are horizontal
facet_grid(Category ~ ., scales = "free_y", space = "free") +  # categories grouped together with free y-scales
scale_fill_manual(values = c("up" = "lightblue", "down" = "pink")) +  # set colors for up and down regulation
labs(title = paste(top_n, "Most Significant GO Terms Across ONT Categories for", comparison_pattern),
x = "GO Term (ID: Description)",
y = "-log10(p.adjust)",
fill = "Regulation") +
theme_minimal() +
theme(strip.text.y = element_text(angle = 0))  # keep facet labels horizontal (for categories)
}
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 5)
# we are using the results of the dds object for the control samples (ko_0 vs. wt_0) mainly because we didn't have to contrast anything and I was tired of coding (dds object: dds_controls; result dds object: res_dds_controls)
# filter results to include only genes with padj < 0.05 and omit those with a padj == NA
filtered_res_dds_controls <- res_dds_controls[!is.na(res_dds_controls$padj) & res_dds_controls$padj < 0.05, ]
# sort the results by log2FoldChange, highest to lowest, and lowest to highest
largest_fc <- head(filtered_res_dds_controls[order(filtered_res_dds_controls$log2FoldChange, decreasing = TRUE), ], 50) # top 50 up regulated
smallest_fc <- head(filtered_res_dds_controls[order(filtered_res_dds_controls$log2FoldChange), ], 50)  # top 50 down regulated
# combine the two sets of fc results
high_and_low_50_genes <- c(rownames(largest_fc), rownames(smallest_fc))
# extract normalized counts using DESeq2's vst() function
normalized_dds_controls_counts <- assay(vst(dds_controls))[high_and_low_50_genes, ]
# create a heat map using pheatmap()
pheatmap(normalized_dds_controls_counts,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
fontsize = 10,            # adjust for column labels
fontsize_row = 6,         # adjust for row labels
height = 300,             # make the plot significantly longer
width = 12,               # adjust width as needed
main = "Heatmap of 50 Largest and Smallest log2FoldChange Genes (padj < 0.05) \nOnly Control Samples: wt_0 vs.ko_0")
# sort the results by log2FoldChange, highest to lowest, and lowest to highest
largest_fc <- head(res_dds_controls[order(res_dds_controls$log2FoldChange, decreasing = TRUE), ], 50) # top 50 up regulated
smallest_fc <- head(res_dds_controls[order(res_dds_controls$log2FoldChange), ], 50)  # top 50 down regulated
# combine the two sets of fc results
high_and_low_50_genes <- c(rownames(largest_fc), rownames(smallest_fc))
# extract normalized counts using DESeq2's vst() function
normalized_dds_controls_counts <- assay(vst(dds_controls))[high_and_low_50_genes, ]
# create a heat map using pheatmap()
pheatmap(normalized_dds_controls_counts,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
fontsize = 10,            # adjust for column labels
fontsize_row = 6,         # adjust for row labels
height = 300,             # make the plot significantly longer
width = 12,               # adjust width as needed
main = "Heatmap of 50 Largest and Smallest log2FoldChange Genes (No padj filter) \nOnly Control Samples: wt_0 vs. ko_0")
library(DOSE)
library(pathview)
# search database to make sure our organism is actually available (newsflash: it is)
search_kegg_organism('Arabidopsis thaliana', by = 'scientific_name')
data(korg)
ri=korg[,"kegg.code"]=="ath"
korg[ri,]
# choose any of the Deseq2 resulting data sets (I'm testing knockout-line vs. wild-type controls)
# copy original data frame and remove tailing ".1" to match TAIR format
df_dds_controls_ko_vs_wt_entrez <- df_dds_controls_knockout_line_vs_wild_type |>
mutate(GeneID = sub("\\.\\d+$", "", GeneID))
# extract the GeneID column
tair_ids_controls <- df_dds_controls_ko_vs_wt_entrez$GeneID
# convert TAIR IDs to ENTREZ IDs
entrez_mapping_controls <- select(org.At.tair.db, keys = tair_ids_controls, keytype = "TAIR", columns = "ENTREZID")
# when matching TAIR IDs to ENTREZ IDs, a warning denotes that there are many:1 mapping instances of TAIR to ENTREZ (i.e. various instances of the same TAIR values being matched to the same ENTREZ values). This is due to transcript variety (.1 vs. .3, but I think that should be fine). Is it?
entrez_mapping_controls |>
dplyr::count(TAIR) |>
dplyr::filter(n > 1)
# merge with newly made _entrez data frame to keep track of IDs
df_dds_controls_ko_vs_wt_entrez <- merge(df_dds_controls_ko_vs_wt_entrez,
entrez_mapping_controls,
by.x = "GeneID", by.y = "TAIR", all.x = TRUE)
# move the newly created ENTREZID next to the GeneID column and remove duplicates
df_dds_controls_ko_vs_wt_entrez <- df_dds_controls_ko_vs_wt_entrez |>
dplyr::select(GeneID, ENTREZID, everything()) |>
distinct() # collapsed a few duplicate entries due to many:1 mapping
# View(df_dds_controls_ko_vs_wt_entrez)
# add a new column (regulation) that signifies UP or DOWN according to the log2FoldChange
df_dds_controls_ko_vs_wt_entrez <- df_dds_controls_ko_vs_wt_entrez |>
mutate(regulation = case_when(
log2FoldChange > 0 ~ "UP",
log2FoldChange < 0 ~ "DOWN"
))
# omits rows with NA values in the ENTREZID column
df_dds_controls_ko_vs_wt_entrez <- df_dds_controls_ko_vs_wt_entrez[!is.na(df_dds_controls_ko_vs_wt_entrez$ENTREZID), ]
# select whichever Deseq2 results you like (I'm testing knockout-line vs. wild-type controls)
# remove tailing ".1" to match TAIR format (remember: padj is already < 0.05 so we don't have to filter)
dds_kegg_controls <- df_dds_controls_knockout_line_vs_wild_type |>
mutate(GeneID = sub("\\.\\d+$", "", GeneID))
# prepare the gene list for KEGG analysis
geneList_controls <- dds_kegg_controls$log2FoldChange # makes vector with log2FoldChange values
names(geneList_controls) <- dds_kegg_controls$GeneID # adds GeneID to the vector
# run KEGG enrichment analysis on the entire (both up and down regulated genes) geneList_controls and produce a list of over-represented pathways we can then visualize in the next step
kegg_ora_analysis_controls <- enrichKEGG(gene = names(geneList_controls),
organism     = 'ath',
pvalueCutoff = 0.05)
# View(kegg_ora_analysis_controls)
plot_gene_counts <- function(dds, genes, intgroup, filter_groups) {
# pull name of the dds object
dds_name <- deparse(substitute(dds))
# extract plot data for multiple genes
plot_data_list <- lapply(genes, function(gene) {
plot_data <- plotCounts(dds, gene = gene, intgroup = intgroup, returnData = TRUE)
plot_data$gene <- gene  # Add gene identifier
plot_data
})
# combine into a single data frame
plot_data_combined <- bind_rows(plot_data_list)
# filter based on specified groups
plot_data_filtered <- plot_data_combined |>
filter(.data[[intgroup]] %in% filter_groups)
# generate plot title dynamically
plot_title <- paste("Gene Counts for", paste(filter_groups, collapse = " vs. "),
"\nData from:", dds_name)
# create the plot with facet_wrap
ggplot(plot_data_filtered, aes_string(x = intgroup, y = "count")) +
geom_jitter(width = 0.2, size = 3, alpha = 0.6) +
stat_summary(fun = "mean", geom = "point", size = 4, color = "red") +
theme_minimal(base_size = 14) +
labs(title = plot_title, y = "Normalized Counts", x = "Condition") +
facet_wrap(~gene, scales = "free_y") +
theme(
strip.background = element_rect(fill = "lightgray", color = "black", size = 1.5),  # Highlight facet labels
strip.text = element_text(face = "bold", size = 12),  # Make facet labels bold
panel.border = element_rect(color = "black", fill = NA, size = 1)  # Add borders to panels
)
}
# example when using a single gene from dds_treatment (ko_20 vs. wt_20)
plot_gene_counts(dds_treatment, genes = "AT1G19350.4",
intgroup = "group", filter_groups = c("ko_20", "wt_20"))
# example when using multiple genes from dds_treatment (ko_20 vs. wt_20)
plot_gene_counts(dds_treatment, genes = c("AT1G02280.1", "AT1G19350.4"),
intgroup = "group", filter_groups = c("ko_20", "wt_20"))
# dds_treatment: ko_40 vs. wt_40
plot_gene_counts(dds_treatment, genes = c("AT1G18870.1", "AT1G20480.1"),
intgroup = "group", filter_groups = c("ko_40", "wt_40"))
# dds_treatment: ko_60 vs. wt_60
plot_gene_counts(dds_treatment, genes = c("AT1G28230.1", "AT1G15010.1"),
intgroup = "group", filter_groups = c("ko_60", "wt_60"))
# dds_treatment: ko_80 vs. wt_80
plot_gene_counts(dds_treatment, genes = c("AT1G69572.1", "AT2G15020.1"),
intgroup = "group", filter_groups = c("ko_80", "wt_80"))
# dds_controls: knockout_line vs. wild_type (ko_0 vs. wt_0)
plot_gene_counts(dds_controls, genes = c("AT1G01390.1", "AT1G02640.1"),
intgroup = "genotype", filter_groups = c("knockout_line", "wild_type"))
# code for if you ever want to view the normalized counts used for plotting the graph of a specific gene and compare to plot; I've compared and it has looked great so far
counts(dds_controls, normalized = TRUE)["AT1G02640.1", ] # specific to a particular gene
# dds_wt: wt_0 vs. wt_20
plot_gene_counts(dds_wt, genes = c("AT1G01560.1", "AT1G02520.1"),
intgroup = "treatment", filter_groups = c("20", "0"))
# dds_wt: wt_0 vs. wt_40
plot_gene_counts(dds_wt, genes = c("AT1G01750.1", "AT1G02065.1"),
intgroup = "treatment", filter_groups = c("40", "0"))
# dds_wt: wt_0 vs. wt_60
plot_gene_counts(dds_wt, genes = c("AT1G02640.1", "AT1G04770.1"),
intgroup = "treatment", filter_groups = c("60", "0"))
# dds_wt: wt_0 vs. wt_80
plot_gene_counts(dds_wt, genes = c("AT1G01520.1", "AT1G03090.2"),
intgroup = "treatment", filter_groups = c("80", "0"))
# dds_ko: ko_0 vs. ko_20
plot_gene_counts(dds_ko, genes = c("AT1G12560.1", "AT1G14440.1"),
intgroup = "treatment", filter_groups = c("20", "0"))
# dds_ko: ko_0 vs. ko_40
plot_gene_counts(dds_ko, genes = c("AT1G02660.1", "AT1G03700.1"),
intgroup = "treatment", filter_groups = c("40", "0"))
# dds_ko: ko_0 vs. ko_60
plot_gene_counts(dds_ko, genes = c("AT1G01750.1", "AT1G02620.1"),
intgroup = "treatment", filter_groups = c("60", "0"))
# dds_ko: ko_0 vs. ko_80
plot_gene_counts(dds_ko, genes = c("AT1G05835.1", "AT1G07500.1"),
intgroup = "treatment", filter_groups = c("80", "0"))
check <- read.csv("../data/arabidopsis_GO_results/down_results/down_BP_control_ko_0_vs_wt_0_GO.csv")
View(check)
check |>
filter(p.adjust == min(p.adjust, na.rm = TRUE))
check |>
filter(p.adjust == min(p.adjust, na.rm = TRUE)) |>
slice_head(n = 5)
check |>
arrange(p.adjust)|>
slice_head(n = 5)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 5)
check |>
arrange(p.adjust)|>
slice_head(n = 5)
check |>
arrange(p.adjust)|>
slice_head(n = 5)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 5)
check |>
arrange(p.adjust)|>
slice_head(n = 5)
check |>
arrange(p.adjust)|>
slice_head(n = 5)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 5)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 7)
check |>
arrange(p.adjust)|>
slice_head(n = 7)
check |>
arrange(p.adjust)|>
slice_head(n = 7) |>
select(ID, Description, p.adjust)
check |>
arrange(p.adjust)|>
slice_head(n = 7) |>
dplyr::select(ID, Description, p.adjust)
plot_top_GO_terms <- function(data_file_path = "../data/arabidopsis_GO_results",
comparison_pattern,
top_n = 5,
up_regulated_data = "up_results",
down_regulated_data = "down_results",
regulation_type = c("up", "down")) {
regulation_type <- match.arg(regulation_type)  # Ensure valid input
# Define the GO categories
go_categories <- c("BP", "MF", "CC")
# Helper function to process files for the selected regulation type
process_files <- function(folder, direction) {
category_data <- data.frame()
for (category in go_categories) {
file_pattern <- paste0(direction, "_", category, "_", comparison_pattern, "_GO.csv")
files <- list.files(folder, pattern = file_pattern, full.names = TRUE)
if (length(files) > 0) {
data <- read.csv(files[1], stringsAsFactors = FALSE) |>
dplyr::filter(!is.na(p.adjust)) |>
dplyr::mutate(Category = category, Regulation = direction)
category_data <- dplyr::bind_rows(category_data, data)
} else {
warning(paste("No matching file found for", direction, category, "in", folder))
}
}
return(category_data)
}
# Process the selected regulation type
data_folder <- ifelse(regulation_type == "up", up_regulated_data, down_regulated_data)
selected_data <- process_files(file.path(data_file_path, data_folder), regulation_type)
# If no significant (< 0.05) GO terms are found, stop execution
if (nrow(selected_data) == 0) {
stop("No significant GO terms found for the given comparison pattern.")
}
# Select the top GO terms
top_go_data <- selected_data |>
group_by(Category) |>
arrange(p.adjust) |>
slice_head(n = top_n) |>
ungroup() |>
mutate(Label = paste0(ID, ": ", Description))
# Plot the selected regulation type
ggplot(top_go_data, aes(x = reorder(Label, p.adjust), y = -log10(p.adjust), fill = Regulation)) +
geom_col() +
coord_flip() +
facet_grid(Category ~ ., scales = "free_y", space = "free") +
scale_fill_manual(values = c("up" = "lightblue", "down" = "pink")) +
labs(title = paste(top_n, "Most Significant GO Terms for", regulation_type, "Regulation in", comparison_pattern),
x = "GO Term (ID: Description)",
y = "-log10(p.adjust)",
fill = "Regulation") +
theme_minimal() +
theme(strip.text.y = element_text(angle = 0))
}
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 7, regulation_type = "up")
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 5, regulation_type = "up")
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 5, regulation_type = "up")
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 5, regulation_type = "down")
# dds_ko: ko_0 vs. ko_20
plot_gene_counts(dds_ko, genes = c("AT1G12560.1", "AT1G14440.1"),
intgroup = "treatment", filter_groups = c("20", "0"))
# dds_ko: ko_0 vs. ko_40
plot_gene_counts(dds_ko, genes = c("AT1G02660.1", "AT1G03700.1"),
intgroup = "treatment", filter_groups = c("40", "0"))
# dds_ko: ko_0 vs. ko_60
plot_gene_counts(dds_ko, genes = c("AT1G01750.1", "AT1G02620.1"),
intgroup = "treatment", filter_groups = c("60", "0"))
# dds_ko: ko_0 vs. ko_80
plot_gene_counts(dds_ko, genes = c("AT1G05835.1", "AT1G07500.1"),
intgroup = "treatment", filter_groups = c("80", "0"))
# dds_wt: wt_0 vs. wt_20
plot_gene_counts(dds_wt, genes = c("AT1G01560.1", "AT1G02520.1"),
intgroup = "treatment", filter_groups = c("20", "0"))
# dds_wt: wt_0 vs. wt_40
plot_gene_counts(dds_wt, genes = c("AT1G01750.1", "AT1G02065.1"),
intgroup = "treatment", filter_groups = c("40", "0"))
# dds_wt: wt_0 vs. wt_60
plot_gene_counts(dds_wt, genes = c("AT1G02640.1", "AT1G04770.1"),
intgroup = "treatment", filter_groups = c("60", "0"))
# dds_wt: wt_0 vs. wt_80
plot_gene_counts(dds_wt, genes = c("AT1G01520.1", "AT1G03090.2"),
intgroup = "treatment", filter_groups = c("80", "0"))
# code for if you ever want to view the normalized counts used for plotting the graph of a specific gene and compare to plot; I've compared and it has looked great so far
counts(dds_controls, normalized = TRUE)["AT1G02640.1", ] # specific to a particular gene
# dds_controls: knockout_line vs. wild_type (ko_0 vs. wt_0)
plot_gene_counts(dds_controls, genes = c("AT1G01390.1", "AT1G02640.1"),
intgroup = "genotype", filter_groups = c("knockout_line", "wild_type"))
View(df_dds_ko_20_vs_0)
# run KEGG enrichment analysis on the entire (both up and down regulated genes) geneList_controls and produce a list of over-represented pathways we can then visualize in the next step
kegg_ora_analysis_controls <- enrichKEGG(gene = names(geneList_controls),
organism     = 'ath',
pvalueCutoff = 0.05)
# View(kegg_ora_analysis_controls)
View(kegg_ora_analysis_controls)
View(kegg_ora_analysis_controls)
# use pathview() to visualize the pathway
pathview(gene.data     = geneList_controls, # input gene list (log2FoldChange)
pathway.id    = "ath00500", # pathway ID we want to visualize
species       = "ath",         # arabidopsis species
out.suffix    = "pathway")
# can use the following to verify if the actual pathway even exists
browseKEGG(kegg_analysis_controls, 'ath00500')
# can use the following to verify if the actual pathway even exists
browseKEGG(kegg_ora_analysis_controls, 'ath00500')
# use pathview() to visualize the pathway
pathview(gene.data     = geneList_controls, # input gene list (log2FoldChange)
pathway.id    = "AT1G26560", # pathway ID we want to visualize
species       = "ath",         # arabidopsis species
out.suffix    = "pathway")
# sort the results by log2FoldChange, highest to lowest, and lowest to highest
largest_fc <- head(res_dds_controls[order(res_dds_controls$log2FoldChange, decreasing = TRUE), ], 50) # top 50 up regulated
smallest_fc <- head(res_dds_controls[order(res_dds_controls$log2FoldChange), ], 50)  # top 50 down regulated
# combine the two sets of fc results
high_and_low_50_genes <- c(rownames(largest_fc), rownames(smallest_fc))
# extract normalized counts using DESeq2's vst() function
normalized_dds_controls_counts <- assay(vst(dds_controls))[high_and_low_50_genes, ]
# create a heat map using pheatmap()
pheatmap(normalized_dds_controls_counts,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
fontsize = 10,            # adjust for column labels
fontsize_row = 6,         # adjust for row labels
height = 300,             # make the plot significantly longer
width = 12,               # adjust width as needed
main = "Heatmap of 50 Largest and Smallest log2FoldChange Genes (No padj filter) \nOnly Control Samples: wt_0 vs. ko_0")
# we are using the results of the dds object for the control samples (ko_0 vs. wt_0) mainly because we didn't have to contrast anything and I was tired of coding (dds object: dds_controls; result dds object: res_dds_controls)
# filter results to include only genes with padj < 0.05 and omit those with a padj == NA
filtered_res_dds_controls <- res_dds_controls[!is.na(res_dds_controls$padj) & res_dds_controls$padj < 0.05, ]
# sort the results by log2FoldChange, highest to lowest, and lowest to highest
largest_fc <- head(filtered_res_dds_controls[order(filtered_res_dds_controls$log2FoldChange, decreasing = TRUE), ], 50) # top 50 up regulated
smallest_fc <- head(filtered_res_dds_controls[order(filtered_res_dds_controls$log2FoldChange), ], 50)  # top 50 down regulated
# combine the two sets of fc results
high_and_low_50_genes <- c(rownames(largest_fc), rownames(smallest_fc))
# extract normalized counts using DESeq2's vst() function
normalized_dds_controls_counts <- assay(vst(dds_controls))[high_and_low_50_genes, ]
# create a heat map using pheatmap()
pheatmap(normalized_dds_controls_counts,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
fontsize = 10,            # adjust for column labels
fontsize_row = 6,         # adjust for row labels
height = 300,             # make the plot significantly longer
width = 12,               # adjust width as needed
main = "Heatmap of 50 Largest and Smallest log2FoldChange Genes (padj < 0.05) \nOnly Control Samples: wt_0 vs.ko_0")
