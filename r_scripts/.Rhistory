}
# Process up- and down-regulated files
up_data <- process_files(file.path(data_file_path, up_regulated_data), "up")
down_data <- process_files(file.path(data_file_path, down_regulated_data), "down")
# Combine both into one dataset
all_go_data <- dplyr::bind_rows(up_data, down_data)
if (nrow(all_go_data) == 0) {
stop("No significant GO terms found for the given comparison pattern.")
}
# Select the top 10 GO terms **per category** based on p.adjust
top_go_data <- all_go_data %>%
group_by(Category) %>%
arrange(p.adjust) %>%
slice_head(n = 5) %>%
ungroup() %>%
mutate(Label = paste0(ID, ": ", Description, " (", Regulation, ")"))
# Plot
ggplot(top_go_data, aes(x = reorder(Label, p.adjust), y = -log10(p.adjust), fill = Regulation)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~Category, scales = "free_y") +
coord_flip() +
scale_fill_manual(values = c("Up" = "blue", "Down" = "red")) +
labs(title = paste("Top 10 Significant GO Terms per Category for", comparison_pattern),
x = "GO Term (ID: Description)",
y = "-log10(p.adjust)",
fill = "Regulation") +
theme_minimal()
}
plot_top_GO_terms(comparison_pattern = "wt_20_vs_0")
plot_top_GO_terms <- function(data_file_path = "../data/arabidopsis_GO_results",
comparison_pattern,
up_regulated_data = "up_results",
down_regulated_data = "down_results") {
go_categories <- c("BP", "MF", "CC")
all_go_data <- data.frame()
process_files <- function(folder, direction) {
category_data <- data.frame()
for (category in go_categories) {
file_pattern <- paste0(direction, "_", category, "_", comparison_pattern, "_GO.csv")
files <- list.files(folder, pattern = file_pattern, full.names = TRUE)
if (length(files) > 0) {
data <- read.csv(files[1], stringsAsFactors = FALSE)
# Select relevant columns and filter significant terms
data <- data %>%
dplyr::filter(!is.na(p.adjust)) %>%
dplyr::mutate(Category = category, Regulation = direction)
category_data <- dplyr::bind_rows(category_data, data)
} else {
warning(paste("No matching file found for", direction, category, "in", folder))
}
}
return(category_data)
}
# Process up- and down-regulated files
up_data <- process_files(file.path(data_file_path, up_regulated_data), "up")
down_data <- process_files(file.path(data_file_path, down_regulated_data), "down")
# Combine both into one dataset
all_go_data <- dplyr::bind_rows(up_data, down_data)
if (nrow(all_go_data) == 0) {
stop("No significant GO terms found for the given comparison pattern.")
}
# Select the top 5 GO terms **per category** based on p.adjust
top_go_data <- all_go_data %>%
group_by(Category) %>%
arrange(p.adjust) %>%
slice_head(n = 5) %>%
ungroup() %>%
mutate(Label = paste0(ID, ": ", Description, " (", Regulation, ")"))
# Plot all categories on the same graph
ggplot(top_go_data, aes(x = reorder(Label, p.adjust), y = -log10(p.adjust), fill = Category, shape = Regulation)) +
geom_col(position = "dodge") +  # Bars for each category
geom_point(size = 3, color = "black", position = position_dodge(width = 0.9)) + # Points for better distinction
coord_flip() +
scale_fill_manual(values = c("BP" = "blue", "MF" = "green", "CC" = "purple")) +
scale_shape_manual(values = c("up" = 21, "down" = 24)) + # Different shapes for Up/Down
labs(title = paste("Top 5 Significant GO Terms Across Categories for", comparison_pattern),
x = "GO Term (ID: Description)",
y = "-log10(p.adjust)",
fill = "GO Category",
shape = "Regulation") +
theme_minimal()
}
# Run the function
plot_top_GO_terms(comparison_pattern = "wt_20_vs_0")
plot_top_GO_terms <- function(data_file_path = "../data/arabidopsis_GO_results",
comparison_pattern,
up_regulated_data = "up_results",
down_regulated_data = "down_results") {
go_categories <- c("BP", "MF", "CC")
all_go_data <- data.frame()
process_files <- function(folder, direction) {
category_data <- data.frame()
for (category in go_categories) {
file_pattern <- paste0(direction, "_", category, "_", comparison_pattern, "_GO.csv")
files <- list.files(folder, pattern = file_pattern, full.names = TRUE)
if (length(files) > 0) {
data <- read.csv(files[1], stringsAsFactors = FALSE)
# Select relevant columns and filter significant terms
data <- data %>%
dplyr::filter(!is.na(p.adjust)) %>%
dplyr::mutate(Category = category, Regulation = direction)
category_data <- dplyr::bind_rows(category_data, data)
} else {
warning(paste("No matching file found for", direction, category, "in", folder))
}
}
return(category_data)
}
# Process up- and down-regulated files
up_data <- process_files(file.path(data_file_path, up_regulated_data), "up")
down_data <- process_files(file.path(data_file_path, down_regulated_data), "down")
# Combine both into one dataset
all_go_data <- dplyr::bind_rows(up_data, down_data)
if (nrow(all_go_data) == 0) {
stop("No significant GO terms found for the given comparison pattern.")
}
# Select the top 5 GO terms **per category** based on p.adjust
top_go_data <- all_go_data %>%
group_by(Category) %>%
arrange(p.adjust) %>%
slice_head(n = 5) %>%
ungroup() %>%
mutate(Label = paste0(ID, ": ", Description))  # Removed regulation from label to keep categories grouped
# Plot with categories staying together
ggplot(top_go_data, aes(x = reorder(Label, p.adjust), y = -log10(p.adjust), fill = Regulation)) +
geom_col(position = position_dodge(width = 0.7)) +  # Keeps Up/Down side by side
coord_flip() +
facet_grid(Category ~ ., scales = "free_y", space = "free") +  # Keeps categories grouped
scale_fill_manual(values = c("up" = "blue", "down" = "red")) +
labs(title = paste("Top 5 Significant GO Terms Across Categories for", comparison_pattern),
x = "GO Term (ID: Description)",
y = "-log10(p.adjust)",
fill = "Regulation") +
theme_minimal() +
theme(strip.text.y = element_text(angle = 0))  # Keeps category labels horizontal
}
# Run the function
plot_top_GO_terms(comparison_pattern = "wt_20_vs_0")
plot_top_GO_terms <- function(data_file_path = "../data/arabidopsis_GO_results",
comparison_pattern,
up_regulated_data = "up_results",
down_regulated_data = "down_results") {
go_categories <- c("BP", "MF", "CC")
all_go_data <- data.frame()
process_files <- function(folder, direction) {
category_data <- data.frame()
for (category in go_categories) {
file_pattern <- paste0(direction, "_", category, "_", comparison_pattern, "_GO.csv")
files <- list.files(folder, pattern = file_pattern, full.names = TRUE)
if (length(files) > 0) {
data <- read.csv(files[1], stringsAsFactors = FALSE)
# Select relevant columns and filter significant terms
data <- data %>%
dplyr::filter(!is.na(p.adjust)) %>%
dplyr::mutate(Category = category, Regulation = direction)
category_data <- dplyr::bind_rows(category_data, data)
} else {
warning(paste("No matching file found for", direction, category, "in", folder))
}
}
return(category_data)
}
# Process up- and down-regulated files
up_data <- process_files(file.path(data_file_path, up_regulated_data), "up")
down_data <- process_files(file.path(data_file_path, down_regulated_data), "down")
# Combine both into one dataset
all_go_data <- dplyr::bind_rows(up_data, down_data)
if (nrow(all_go_data) == 0) {
stop("No significant GO terms found for the given comparison pattern.")
}
# Select the top 5 GO terms **per category** based on p.adjust
top_go_data <- all_go_data %>%
group_by(Category) %>%
arrange(p.adjust) %>%
slice_head(n = 5) %>%
ungroup() %>%
mutate(Label = paste0(ID, ": ", Description))  # Removed regulation from label to keep categories grouped
# Plot with categories staying together
ggplot(top_go_data, aes(x = reorder(Label, p.adjust), y = -log10(p.adjust), fill = Regulation)) +
geom_col(position = position_dodge(width = 0.7)) +  # Keeps Up/Down side by side
coord_flip() +
facet_grid(Category ~ ., scales = "free_y", space = "free") +  # Keeps categories grouped
scale_fill_manual(values = c("up" = "blue", "down" = "red")) +
labs(title = paste("Top 5 Significant GO Terms Across Categories for", comparison_pattern),
x = "GO Term (ID: Description)",
y = "-log10(p.adjust)",
fill = "Regulation") +
theme_minimal() +
theme(strip.text.y = element_text(angle = 0))  # Keeps category labels horizontal
}
# Run the function
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0")
plot_top_GO_terms <- function(data_file_path = "../data/arabidopsis_GO_results",
comparison_pattern,
up_regulated_data = "up_results",
down_regulated_data = "down_results") {
# define the GO categories
go_categories <- c("BP", "MF", "CC")
all_data <- data.frame()  # initialize a data frame to store all GO term info
# helper function used to process files in a given folder and direction ("up" or "down")
process_files <- function(folder, direction) {
category_data <- data.frame()  # initialize a data frame for the category info
for (category in go_categories) {
# build the exact file name pattern
file_pattern <- paste0(direction, "_", category, "_", comparison_pattern, "_GO.csv")
# list out files matching the name pattern (should be only one per category (BP, MF, CC))
files <- list.files(folder, pattern = file_pattern, full.names = TRUE)
# take the initial match (should only be one anyways)
if (length(files) > 0) {
data <- read.csv(files[1], stringsAsFactors = FALSE)
# filter the data only keep non-NA p.adjust values and create Category and Regulation columns
data <- data |>
dplyr::filter(!is.na(p.adjust)) |>
dplyr::mutate(Category = category, Regulation = direction)
# bind the data for a category to the category_data data frame
category_data <- dplyr::bind_rows(category_data, data)
} else {
# if no files are found (i.e. incorrect pattern input), print a warning error
warning(paste("No matching file found for", direction, category, "in", folder))
}
}
return(category_data)  # return the collected data for the given direction
}
# process both the "up" and "down" CSV file results
up_data <- process_files(file.path(data_file_path, up_regulated_data), "up")
down_data <- process_files(file.path(data_file_path, down_regulated_data), "down")
# combine the up-regulated and down-regulated data into a single data frame (in the form of all_data)
all_data <- dplyr::bind_rows(up_data, down_data)
# if no significant (< 0.05) GO terms are found, display error
if (nrow(all_data) == 0) {
stop("No significant GO terms found for given comparison pattern.")
}
# select the top 5 GO terms
top_go_data <- all_data |>
group_by(Category) |>
arrange(p.adjust) |>  # sort by smallest p.adjust to get the most significant terms (ascending order)
slice_head(n = 5) |>   # select the top 5 GO terms per category
ungroup() |>
mutate(Label = paste0(ID, ": ", Description))  # create a label for each GO term (ID: Description)
# plot the top GO terms
ggplot(top_go_data, aes(x = reorder(Label, p.adjust), y = -log10(p.adjust), fill = Regulation)) +
geom_col(position = position_dodge(width = 0.7)) +  # use position_dodge to place up/down bars side by side
coord_flip() +  # flip coordinates so the bars are horizontal
facet_grid(Category ~ ., scales = "free_y", space = "free") +  # categories grouped together with free y-scales
scale_fill_manual(values = c("up" = "lightblue", "down" = "pink")) +  # set colors for up and down regulation
labs(title = paste("Top 5 Significant GO Terms Across ONT Categories for", comparison_pattern),
x = "GO Term (ID: Description)",
y = "-log10(p.adjust)",
fill = "Regulation") +
theme_minimal() +
theme(strip.text.y = element_text(angle = 0))  # keep facet labels horizontal (for categories)
}
# Run the function with a specific comparison pattern
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0")
plot_top_GO_terms <- function(data_file_path = "../data/arabidopsis_GO_results",
comparison_pattern,
up_regulated_data = "up_results",
down_regulated_data = "down_results") {
# define the GO categories
go_categories <- c("BP", "MF", "CC")
all_data <- data.frame()  # initialize a data frame to store all GO term info
# helper function used to process files in a given folder and direction ("up" or "down")
process_files <- function(folder, direction) {
category_data <- data.frame()  # initialize a data frame for the category info
for (category in go_categories) {
# build the exact file name pattern
file_pattern <- paste0(direction, "_", category, "_", comparison_pattern, "_GO.csv")
# list out files matching the name pattern (should be only one per category (BP, MF, CC))
files <- list.files(folder, pattern = file_pattern, full.names = TRUE)
# take the initial match (should only be one anyways)
if (length(files) > 0) {
data <- read.csv(files[1], stringsAsFactors = FALSE)
# filter the data only keep non-NA p.adjust values and create Category and Regulation columns
data <- data |>
dplyr::filter(!is.na(p.adjust)) |>
dplyr::mutate(Category = category, Regulation = direction)
# bind the data for a category to the category_data data frame
category_data <- dplyr::bind_rows(category_data, data)
} else {
# if no files are found (i.e. incorrect pattern input), print a warning error
warning(paste("No matching file found for", direction, category, "in", folder))
}
}
return(category_data)  # return the collected data for the given direction
}
# process both the "up" and "down" CSV file results
up_data <- process_files(file.path(data_file_path, up_regulated_data), "up")
down_data <- process_files(file.path(data_file_path, down_regulated_data), "down")
# combine the up-regulated and down-regulated data into a single data frame (in the form of all_data)
all_data <- dplyr::bind_rows(up_data, down_data)
# if no significant (< 0.05) GO terms are found, display error
if (nrow(all_data) == 0) {
stop("No significant GO terms found for given comparison pattern.")
}
# select the top 5 GO terms
top_go_data <- all_data |>
group_by(Category) |>
arrange(p.adjust) |>  # sort by smallest p.adjust to get the most significant terms (ascending order)
slice_head(n = 5) |>   # select the top 5 GO terms per category
ungroup() |>
mutate(Label = paste0(ID, ": ", Description))  # create a label for each GO term (ID: Description)
# plot the top GO terms
ggplot(top_go_data, aes(x = reorder(Label, p.adjust), y = -log10(p.adjust), fill = Regulation)) +
geom_col(position = position_dodge(width = 0.7)) +  # use position_dodge to place up/down bars side by side
coord_flip() +  # flip coordinates so the bars are horizontal
facet_grid(Category ~ ., scales = "free_y", space = "free") +  # categories grouped together with free y-scales
scale_fill_manual(values = c("up" = "lightblue", "down" = "pink")) +  # set colors for up and down regulation
labs(title = paste("Top 5 Significant GO Terms Across ONT Categories for", comparison_pattern),
x = "GO Term (ID: Description)",
y = "-log10(p.adjust)",
fill = "Regulation") +
theme_minimal() +
theme(strip.text.y = element_text(angle = 0))  # keep facet labels horizontal (for categories)
}
# Run the function with a specific comparison pattern
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0")
plot_top_GO_terms <- function(data_file_path = "../data/arabidopsis_GO_results",
comparison_pattern,
top_n = 5,
up_regulated_data = "up_results",
down_regulated_data = "down_results") {
# define the GO categories
go_categories <- c("BP", "MF", "CC")
all_data <- data.frame()  # initialize a data frame to store all GO term info
# helper function used to process files in a given folder and direction ("up" or "down")
process_files <- function(folder, direction) {
category_data <- data.frame()  # initialize a data frame for the category info
for (category in go_categories) {
# build the exact file name pattern
file_pattern <- paste0(direction, "_", category, "_", comparison_pattern, "_GO.csv")
# list out files matching the name pattern (should be only one per category (BP, MF, CC))
files <- list.files(folder, pattern = file_pattern, full.names = TRUE)
# take the initial match (should only be one anyways)
if (length(files) > 0) {
data <- read.csv(files[1], stringsAsFactors = FALSE)
# filter the data only keep non-NA p.adjust values and create Category and Regulation columns
data <- data |>
dplyr::filter(!is.na(p.adjust)) |>
dplyr::mutate(Category = category, Regulation = direction)
# bind the data for a category to the category_data data frame
category_data <- dplyr::bind_rows(category_data, data)
} else {
# if no files are found (i.e. incorrect pattern input), print a warning error
warning(paste("No matching file found for", direction, category, "in", folder))
}
}
return(category_data)  # return the collected data for the given direction
}
# process both the "up" and "down" CSV file results
up_data <- process_files(file.path(data_file_path, up_regulated_data), "up")
down_data <- process_files(file.path(data_file_path, down_regulated_data), "down")
# combine the up-regulated and down-regulated data into a single data frame (in the form of all_data)
all_data <- dplyr::bind_rows(up_data, down_data)
# if no significant (< 0.05) GO terms are found, display error
if (nrow(all_data) == 0) {
stop("No significant GO terms found for given comparison pattern.")
}
# select the top 5 GO terms
top_go_data <- all_data |>
group_by(Category) |>
arrange(p.adjust) |>  # sort by smallest p.adjust to get the most significant terms (ascending order)
slice_head(n = top_n) |>   # select the top GO terms per category (choose how many when calling the function)
ungroup() |>
mutate(Label = paste0(ID, ": ", Description))  # create a label for each GO term (ID: Description)
# plot the top GO terms
ggplot(top_go_data, aes(x = reorder(Label, p.adjust), y = -log10(p.adjust), fill = Regulation)) +
geom_col(position = position_dodge(width = 0.7)) +  # use position_dodge to place up/down bars side by side
coord_flip() +  # flip coordinates so the bars are horizontal
facet_grid(Category ~ ., scales = "free_y", space = "free") +  # categories grouped together with free y-scales
scale_fill_manual(values = c("up" = "lightblue", "down" = "pink")) +  # set colors for up and down regulation
labs(title = paste("Top 5 Significant GO Terms Across ONT Categories for", comparison_pattern),
x = "GO Term (ID: Description)",
y = "-log10(p.adjust)",
fill = "Regulation") +
theme_minimal() +
theme(strip.text.y = element_text(angle = 0))  # keep facet labels horizontal (for categories)
}
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0")
plot_top_GO_terms <- function(data_file_path = "../data/arabidopsis_GO_results",
comparison_pattern,
top_n = 5,
up_regulated_data = "up_results",
down_regulated_data = "down_results") {
# define the GO categories
go_categories <- c("BP", "MF", "CC")
all_data <- data.frame()  # initialize a data frame to store all GO term info
# helper function used to process files in a given folder and direction ("up" or "down")
process_files <- function(folder, direction) {
category_data <- data.frame()  # initialize a data frame for the category info
for (category in go_categories) {
# build the exact file name pattern
file_pattern <- paste0(direction, "_", category, "_", comparison_pattern, "_GO.csv")
# list out files matching the name pattern (should be only one per category (BP, MF, CC))
files <- list.files(folder, pattern = file_pattern, full.names = TRUE)
# take the initial match (should only be one anyways)
if (length(files) > 0) {
data <- read.csv(files[1], stringsAsFactors = FALSE)
# filter the data only keep non-NA p.adjust values and create Category and Regulation columns
data <- data |>
dplyr::filter(!is.na(p.adjust)) |>
dplyr::mutate(Category = category, Regulation = direction)
# bind the data for a category to the category_data data frame
category_data <- dplyr::bind_rows(category_data, data)
} else {
# if no files are found (i.e. incorrect pattern input), print a warning error
warning(paste("No matching file found for", direction, category, "in", folder))
}
}
return(category_data)  # return the collected data for the given direction
}
# process both the "up" and "down" CSV file results
up_data <- process_files(file.path(data_file_path, up_regulated_data), "up")
down_data <- process_files(file.path(data_file_path, down_regulated_data), "down")
# combine the up-regulated and down-regulated data into a single data frame (in the form of all_data)
all_data <- dplyr::bind_rows(up_data, down_data)
# if no significant (< 0.05) GO terms are found, display error
if (nrow(all_data) == 0) {
stop("No significant GO terms found for given comparison pattern.")
}
# select the top 5 GO terms
top_go_data <- all_data |>
group_by(Category) |>
arrange(p.adjust) |>  # sort by smallest p.adjust to get the most significant terms (ascending order)
slice_head(n = top_n) |>   # select the top GO terms per category (choose how many when calling the function)
ungroup() |>
mutate(Label = paste0(ID, ": ", Description))  # create a label for each GO term (ID: Description)
# plot the top GO terms
ggplot(top_go_data, aes(x = reorder(Label, p.adjust), y = -log10(p.adjust), fill = Regulation)) +
geom_col(position = position_dodge(width = 0.7)) +  # use position_dodge to place up/down bars side by side
coord_flip() +  # flip coordinates so the bars are horizontal
facet_grid(Category ~ ., scales = "free_y", space = "free") +  # categories grouped together with free y-scales
scale_fill_manual(values = c("up" = "lightblue", "down" = "pink")) +  # set colors for up and down regulation
labs(title = paste("Top", top_n, "Significant GO Terms Across ONT Categories for", comparison_pattern),
x = "GO Term (ID: Description)",
y = "-log10(p.adjust)",
fill = "Regulation") +
theme_minimal() +
theme(strip.text.y = element_text(angle = 0))  # keep facet labels horizontal (for categories)
}
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0")
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 3)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 10)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 6)
plot_top_GO_terms <- function(data_file_path = "../data/arabidopsis_GO_results",
comparison_pattern,
top_n = 5,
up_regulated_data = "up_results",
down_regulated_data = "down_results") {
# define the GO categories
go_categories <- c("BP", "MF", "CC")
all_data <- data.frame()  # initialize a data frame to store all GO term info
# helper function used to process files in a given folder and direction ("up" or "down")
process_files <- function(folder, direction) {
category_data <- data.frame()  # initialize a data frame for the category info
for (category in go_categories) {
# build the exact file name pattern
file_pattern <- paste0(direction, "_", category, "_", comparison_pattern, "_GO.csv")
# list out files matching the name pattern (should be only one per category (BP, MF, CC))
files <- list.files(folder, pattern = file_pattern, full.names = TRUE)
# take the initial match (should only be one anyways)
if (length(files) > 0) {
data <- read.csv(files[1], stringsAsFactors = FALSE)
# filter the data only keep non-NA p.adjust values and create Category and Regulation columns
data <- data |>
dplyr::filter(!is.na(p.adjust)) |>
dplyr::mutate(Category = category, Regulation = direction)
# bind the data for a category to the category_data data frame
category_data <- dplyr::bind_rows(category_data, data)
} else {
# if no files are found (i.e. incorrect pattern input), print a warning error
warning(paste("No matching file found for", direction, category, "in", folder))
}
}
return(category_data)  # return the collected data for the given direction
}
# process both the "up" and "down" CSV file results
up_data <- process_files(file.path(data_file_path, up_regulated_data), "up")
down_data <- process_files(file.path(data_file_path, down_regulated_data), "down")
# combine the up-regulated and down-regulated data into a single data frame (in the form of all_data)
all_data <- dplyr::bind_rows(up_data, down_data)
# if no significant (< 0.05) GO terms are found, display error
if (nrow(all_data) == 0) {
stop("No significant GO terms found for given comparison pattern.")
}
# select the top 5 GO terms
top_go_data <- all_data |>
group_by(Category) |>
arrange(p.adjust) |>  # sort by smallest p.adjust to get the most significant terms (ascending order)
slice_head(n = top_n) |>   # select the top GO terms per category (choose how many when calling the function)
ungroup() |>
mutate(Label = paste0(ID, ": ", Description))  # create a label for each GO term (ID: Description)
# plot the top GO terms
ggplot(top_go_data, aes(x = reorder(Label, p.adjust), y = -log10(p.adjust), fill = Regulation)) +
geom_col(position = position_dodge(width = 0.7)) +  # use position_dodge to place up/down bars side by side
coord_flip() +  # flip coordinates so the bars are horizontal
facet_grid(Category ~ ., scales = "free_y", space = "free") +  # categories grouped together with free y-scales
scale_fill_manual(values = c("up" = "lightblue", "down" = "pink")) +  # set colors for up and down regulation
labs(title = paste(top_n, "Most Significant GO Terms Across ONT Categories for", comparison_pattern),
x = "GO Term (ID: Description)",
y = "-log10(p.adjust)",
fill = "Regulation") +
theme_minimal() +
theme(strip.text.y = element_text(angle = 0))  # keep facet labels horizontal (for categories)
}
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 6)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 6)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 10)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 6)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 10)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 6)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 10)
plot_top_GO_terms(comparison_pattern = "control_ko_0_vs_wt_0", top_n = 5)
