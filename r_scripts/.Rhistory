# Alternatively, use rlog (log transformation)
# vsd <- rlog(dds, blind = FALSE)
# extract the transformed data
transformed_counts <- assay(vsd)
# perform PCA on the transformed counts
pca <- prcomp(t(transformed_counts))
# create a data frame with PCA results and sample metadata
pca_dat <- as.data.frame(pca$x)  # PCA scores for each sample
pca_dat$sample <- rownames(pca_dat)  # sample names
pca_dat$treatment <- colData(dds)$treatment  # grouping variable (treatment condition)
pca_dat$genotype <- colData(dds)$genotype  # add genotype to the PCA data
# plot the first two principal components
ggplot(pca_dat, aes(x = PC1, y = PC2, color = treatment, shape = genotype, label = sample)) +
geom_point(size = 3) +
geom_text(vjust = -1, hjust = 0.5, size = 3) +
labs(
title = "PCA Plot of Arabidopsis Selenium Treatment:\nSulfur Transport Knockout-Line and Wild-Type Samples",
x = paste0("PC1: ", round(summary(pca)$importance[2, 1] * 100, 1), "% Variance"),
y = paste0("PC2: ", round(summary(pca)$importance[2, 2] * 100, 1), "% Variance"),
color = "Treatment",
shape = "Genotype"
) +
theme_minimal()
# Step 1: Compute results for the contrast
res <- results(dds, contrast = c("genotype", "knockout_line", "wild_type"))
# Step 2: Apply shrinkage to the results
res_shrink <- lfcShrink(dds, coef = "genotype_knockout_line_vs_wild_type", type = "apeglm")
# check results
summary(res_shrink)
# create a data frame with the results from lfcShrink
pca_dat_shrink <- as.data.frame(res_shrink)
pca_dat_shrink$significance <- ifelse(pca_dat_shrink$padj < 0.05, "Significant", "Not Significant")
# create MA plot using ggplot2
ggplot(pca_dat_shrink, aes(x = baseMean, y = log2FoldChange, color = significance)) +
geom_point(size = 1) +
scale_color_manual(values = c("Significant" = "blue", "Not Significant" = "black")) +
scale_x_log10() +  # Apply log scale to x-axis (baseMean)
labs(title = "MA Plot: Differential Expression with Shrinkage",
x = "Mean of Normalized Counts (log scale)",
y = "Shrunken Log2 Fold Change") +
theme_minimal()
# display original colData produced under "1. Preparing Count Data"
head(colData)
# display original data_counts produced under "1. Preparing Count Data"
head(data_counts)
# subset colData to only include rows where treatment is 0 (control groups)
colData_controls <- colData[colData$treatment == 0, ]
head(colData_controls)
# subset data_counts to only include columns that start with 'Col01_1' or 'ST35_1'
control_columns <- grep("^(Col01_1.*|ST35_1.*)", colnames(data_counts))
# subset the data_counts to only include the above columns
data_counts_controls <- data_counts[, control_columns]
head(data_counts_controls)
# subset colData to only include rows where genotype is wild_type
colData_wt <- colData[colData$genotype == "wild_type", ]
head(colData_wt)
# subset data_counts to only include columns that start with 'Col'
wt_columns <- grep("^(Col.*)", colnames(data_counts))
# subset the data_counts to only include the above columns
data_counts_wt <- data_counts[, wt_columns]
head(data_counts_wt)
# subset colData to only include rows where genotype is knockout_line
colData_ko <- colData[colData$genotype == "knockout_line", ]
head(colData_ko)
# subset data_counts to only include columns that start with 'ST35'
ko_columns <- grep("^(ST35.*)", colnames(data_counts))
# subset the data_counts to only include the above columns
data_counts_ko <- data_counts[, ko_columns]
head(data_counts_ko)
dds_generator <- function(read_counts, column_data, design_parameter, filter_low_counts = NULL) {
if (!is.character(design_parameter)) {
stop("'design_parameter' must be a character string representing the design formula.")
}
# validate design variables exist in column_data
design_vars <- unlist(strsplit(design_parameter, " \\+ | \\* "))
missing_vars <- setdiff(design_vars, colnames(column_data))
if (length(missing_vars) > 0) {
stop("The following design variables are missing in 'column_data': ", paste(missing_vars, collapse = ", "))
}
# convert design parameter input into formula
design_formula <- as.formula(paste("~", design_parameter))
# creating DESeq2 object
dds <- DESeqDataSetFromMatrix(countData = read_counts,
colData = column_data,
design = design_formula)
# remove low gene counts only if a filtering threshold is specified
if (!is.null(filter_low_counts) && is.numeric(filter_low_counts) && filter_low_counts > 0) {
keep_counts <- rowSums(counts(dds)) >= filter_low_counts
dds <- dds[keep_counts,]
}
return(dds)
}
dds_treatment <- dds_generator(data_counts, colData, "group", 10)
# set reference level: group to wt_0
dds_treatment$group <- relevel(dds_treatment$group, ref = "wt_0")
dds_treatment
dds_controls <- dds_generator(data_counts_controls, colData_controls, "genotype", 10)
# set reference level: genotype to wild_type
dds_controls$genotype <- relevel(dds_controls$genotype, ref = "wild_type")
dds_controls
dds_wt <- dds_generator(data_counts_wt, colData_wt, "treatment", 10)
# set reference level: treatment to 0
dds_wt$treatment <- relevel(dds_wt$treatment, ref = "0")
dds_wt
dds_ko <- dds_generator(data_counts_ko, colData_ko, "treatment", 10)
# set reference level: treatment to 0
dds_ko$treatment <- relevel(dds_ko$treatment, ref = "0")
dds_ko
coef_shrinkage_contrast <- function(dds_object, column, level_1, priority_level_2, output_dir = "../data/arabidopsis_deseq2_results/") {
# construct the expected coefficient name
coef_name <- paste0(column, "_", level_1, "_vs_", priority_level_2)
# ensure the coefficient exists
dds_name <- deparse(substitute(dds_object))  # grab the object's name as a string
if (!(coef_name %in% resultsNames(dds_object))) {
stop(paste("Coefficient", coef_name, "not found in object", dds_name, ". Check resultsNames(", dds_name, ")."))
}
# apply shrinkage using apeglm
shrink_result <- lfcShrink(dds_object, coef = coef_name, type = "apeglm")
# convert the shrinkage results to a data frame
result_df <- as.data.frame(shrink_result)
# add the gene IDs as a column in the data frame
result_df$GeneID <- rownames(result_df)
# re-order columns to place GeneID as the first column
result_df <- result_df[, c("GeneID", colnames(result_df)[-ncol(result_df)])]
# get the name of the dds_object (used for output_file name)
dds_name <- deparse(substitute(dds_object))
# generate dynamic output file name
output_file <- paste0(output_dir, "deseq2_", dds_name, "_", level_1, "_vs_", priority_level_2, ".csv")
# write output to a CSV file
write.csv(result_df, output_file, row.names = FALSE)
}
ashr_shrinkage_contrast <- function(dds_object, column, level_1, priority_level_2, output_dir = "../data/arabidopsis_deseq2_results/") {
# ensure the contrast levels exist
dds_name <- deparse(substitute(dds_object))  # grab the object's name as a string
all_levels <- resultsNames(dds_object)
# checks whether or not specified contrast levels exist in the dds_object
if (!(paste0(column, "_", level_1) %in% all_levels) | !(paste0(column, "_", priority_level_2) %in% all_levels)) {
stop(paste("Levels", level_1, "or", priority_level_2, "not found in object", dds_name, ". Check resultsNames(", dds_name, ")."))
}
# apply shrinkage using ashr and contrast
shrink_result <- lfcShrink(dds_object, contrast = c(column, level_1, priority_level_2), type = "ashr")
# convert the shrinkage results to a data frame
result_df <- as.data.frame(shrink_result)
# add the gene IDs as a column in the data frame
result_df$GeneID <- rownames(result_df)
# re-order columns to place GeneID as the first column
result_df <- result_df[, c("GeneID", colnames(result_df)[-ncol(result_df)])]
# generate dynamic output file name
output_file <- paste0(output_dir, "deseq2_", dds_name, "_", level_1, "_vs_", priority_level_2, ".csv")
# write output to a CSV file
write.csv(result_df, output_file, row.names = FALSE)
}
# run the differential gene expression analysis
dds_treatment <- DESeq(dds_treatment)
# view what conditions were contrasted to make sure they match what we actually meant to compare
resultsNames(dds_treatment)
# store the results in an object
res_dds_treatment <- results(dds_treatment)
# view DESeq2 results
res_dds_treatment
# summary results of res_dds_treatment (with re-level of group = wt_0)
summary(res_dds_treatment)
ashr_shrinkage_contrast(dds_treatment, "group", "ko_20", "wt_20")
resultsNames(dds_treatment)
ashr_shrinkage_contrast(dds_treatment, "group", "ko_20", "wt_20")
ashr_shrinkage_contrast <- function(dds_object, column, level_1, priority_level_2, output_dir = "../data/arabidopsis_deseq2_results/") {
# ensure the contrast levels exist
dds_name <- deparse(substitute(dds_object))  # grab the object's name as a string
factor_levels <- levels(colData(dds_object)[[column]])  # Get levels of the specified column
# check whether the levels exist in the factor column
if (!(level_1 %in% factor_levels) | !(priority_level_2 %in% factor_levels)) {
stop(paste("Levels", level_1, "or", priority_level_2, "not found in column", column, "of object", dds_name, ". Check levels(colData(",
dds_name, ")[[", column, "]])."))
}
# apply shrinkage using ashr and contrast
shrink_result <- lfcShrink(dds_object, contrast = c(column, level_1, priority_level_2), type = "ashr")
# convert the shrinkage results to a data frame
result_df <- as.data.frame(shrink_result)
# add the gene IDs as a column in the data frame
result_df$GeneID <- rownames(result_df)
# re-order columns to place GeneID as the first column
result_df <- result_df[, c("GeneID", colnames(result_df)[-ncol(result_df)])]
# generate dynamic output file name
output_file <- paste0(output_dir, "deseq2_", dds_name, "_", level_1, "_vs_", priority_level_2, ".csv")
# write output to a CSV file
write.csv(result_df, output_file, row.names = FALSE)
}
# run the differential gene expression analysis
dds_treatment <- DESeq(dds_treatment)
# view what conditions were contrasted to make sure they match what we actually meant to compare
resultsNames(dds_treatment)
# store the results in an object
res_dds_treatment <- results(dds_treatment)
# view DESeq2 results
res_dds_treatment
# summary results of res_dds_treatment (with re-level of group = wt_0)
summary(res_dds_treatment)
ashr_shrinkage_contrast(dds_treatment, "group", "ko_20", "wt_20")
resultsNames(dds_treatment)
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(readr)
library(DESeq2)
library(apeglm)
library(ashr)
# reads in count data
feature_counts <- read_tsv("../data/featureCounts_at_ST35.txt", show_col_types = FALSE)
# shows a snippet of the count data
head(feature_counts, 10)
knitr::include_graphics("../resources/arabidopsis_sample_key.png")
# extract column names for the samples (exclude non-sample columns)
sample_names <- colnames(feature_counts)[-c(1, 2)]  # "GeneID" and "Length" are the first two columns (non-sample columns)
# map sample names treatment and genotype columns, respectively
colData <- data.frame(
sample_name = sample_names,
treatment = case_when(
grepl("^Col01_1", sample_names) ~ "0",
grepl("^Col01_2", sample_names) ~ "20",
grepl("^Col01_3", sample_names) ~ "40",
grepl("^Col01_4", sample_names) ~ "60",
grepl("^Col01_5", sample_names) ~ "80",
grepl("^ST35_1", sample_names) ~ "0",
grepl("^ST35_2", sample_names) ~ "20",
grepl("^ST35_3", sample_names) ~ "40",
grepl("^ST35_4", sample_names) ~ "60",
grepl("^ST35_5", sample_names) ~ "80",
TRUE ~ NA_character_ # default if no pattern matches
),
genotype = case_when(
grepl("Col", sample_names, ignore.case = TRUE) ~ "wild_type",
grepl("ST35", sample_names, ignore.case = TRUE) ~ "knockout_line",
TRUE ~ NA_character_ # default if no pattern matches
),
row.names = sample_names # set sample_name column content as row names
)
# combine 'genotype' and 'treatment' into a new 'group' column with shortened genotypes
colData$group <- paste(
case_when(
colData$genotype == "wild_type" ~ "wt",
colData$genotype == "knockout_line" ~ "ko",
TRUE ~ NA_character_
),
colData$treatment,
sep = "_"
)
# convert appropriate columns into factors and remove sample_name column
colData <- colData |>
mutate(
treatment = factor(treatment),
genotype = factor(genotype),
group = factor(group)
) |>
select(-sample_name) # remove sample_name column
# verify data structure
str(colData)
# display colData
head(colData, 10)
# checking for matching names
all(colnames(feature_counts) %in% rownames(colData))
# converting GeneID to rownames and removing Length column found in original feature count data set
data_counts <- feature_counts |>
column_to_rownames("GeneID") |>
select(-Length)
# checking for matching names
all(colnames(data_counts) %in% rownames(colData))
# checking that they are in the same order
all(colnames(data_counts) == rownames(colData))
# view new data counts format
head(data_counts, 10)
# creating DESeq2 object
dds <- DESeqDataSetFromMatrix(countData = data_counts,
colData = colData,
design = ~ treatment + genotype + treatment:genotype)
dds
# remove low gene counts (<10)
keep_counts <- rowSums(counts(dds)) >= 10
dds <- dds[keep_counts,]
dds
# use wild_type control as reference baseline
dds$treatment <- relevel(dds$treatment, ref = "0")
dds$genotype <- relevel(dds$genotype, ref = "wild_type")
# use the control as reference for every single dds object I will be making
# you may want to set this to a different variable object so that we can keep reusing our set up data and not overwrite it every time (double-check with Dr. Liang if I can do that because this doesn't seem t make new variable anyway)
# run the differential gene expression analysis
dds <- DESeq(dds)
# view what conditions were contrasted to make sure they match what we actually meant to compare
resultsNames(dds)
# store the results in an object
res_dds <- results(dds)
# view DESeq2 results
res_dds
# normalization of read counts for future use
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
normalized_counts <- counts(dds, normalized = TRUE)
# make a box plot using normalized counts
boxplot(log10(normalized_counts))
# write data to a csv file
write.csv(normalized_counts, file = "../data/st35_normalized_counts.csv")
# summary results of dds (with a re-leveling of wild_type control vs. each treatment, and interaction between treatment and genotype)
summary(res_dds)
# with adjusted p-value of 0.05
res_0.05_dds <- results(dds, alpha = 0.05)
summary(res_0.05_dds)
# perform variance stabilizing transformation (VST)
vsd <- vst(dds, blind = FALSE)
# Alternatively, use rlog (log transformation)
# vsd <- rlog(dds, blind = FALSE)
# extract the transformed data
transformed_counts <- assay(vsd)
# perform PCA on the transformed counts
pca <- prcomp(t(transformed_counts))
# create a data frame with PCA results and sample metadata
pca_dat <- as.data.frame(pca$x)  # PCA scores for each sample
pca_dat$sample <- rownames(pca_dat)  # sample names
pca_dat$treatment <- colData(dds)$treatment  # grouping variable (treatment condition)
pca_dat$genotype <- colData(dds)$genotype  # add genotype to the PCA data
# plot the first two principal components
ggplot(pca_dat, aes(x = PC1, y = PC2, color = treatment, shape = genotype, label = sample)) +
geom_point(size = 3) +
geom_text(vjust = -1, hjust = 0.5, size = 3) +
labs(
title = "PCA Plot of Arabidopsis Selenium Treatment:\nSulfur Transport Knockout-Line and Wild-Type Samples",
x = paste0("PC1: ", round(summary(pca)$importance[2, 1] * 100, 1), "% Variance"),
y = paste0("PC2: ", round(summary(pca)$importance[2, 2] * 100, 1), "% Variance"),
color = "Treatment",
shape = "Genotype"
) +
theme_minimal()
# Step 1: Compute results for the contrast
res <- results(dds, contrast = c("genotype", "knockout_line", "wild_type"))
# Step 2: Apply shrinkage to the results
res_shrink <- lfcShrink(dds, coef = "genotype_knockout_line_vs_wild_type", type = "apeglm")
# check results
summary(res_shrink)
# create a data frame with the results from lfcShrink
pca_dat_shrink <- as.data.frame(res_shrink)
pca_dat_shrink$significance <- ifelse(pca_dat_shrink$padj < 0.05, "Significant", "Not Significant")
# create MA plot using ggplot2
ggplot(pca_dat_shrink, aes(x = baseMean, y = log2FoldChange, color = significance)) +
geom_point(size = 1) +
scale_color_manual(values = c("Significant" = "blue", "Not Significant" = "black")) +
scale_x_log10() +  # Apply log scale to x-axis (baseMean)
labs(title = "MA Plot: Differential Expression with Shrinkage",
x = "Mean of Normalized Counts (log scale)",
y = "Shrunken Log2 Fold Change") +
theme_minimal()
# display original colData produced under "1. Preparing Count Data"
head(colData)
# display original data_counts produced under "1. Preparing Count Data"
head(data_counts)
# subset colData to only include rows where treatment is 0 (control groups)
colData_controls <- colData[colData$treatment == 0, ]
head(colData_controls)
# subset data_counts to only include columns that start with 'Col01_1' or 'ST35_1'
control_columns <- grep("^(Col01_1.*|ST35_1.*)", colnames(data_counts))
# subset the data_counts to only include the above columns
data_counts_controls <- data_counts[, control_columns]
head(data_counts_controls)
# subset colData to only include rows where genotype is wild_type
colData_wt <- colData[colData$genotype == "wild_type", ]
head(colData_wt)
# subset data_counts to only include columns that start with 'Col'
wt_columns <- grep("^(Col.*)", colnames(data_counts))
# subset the data_counts to only include the above columns
data_counts_wt <- data_counts[, wt_columns]
head(data_counts_wt)
# subset colData to only include rows where genotype is knockout_line
colData_ko <- colData[colData$genotype == "knockout_line", ]
head(colData_ko)
# subset data_counts to only include columns that start with 'ST35'
ko_columns <- grep("^(ST35.*)", colnames(data_counts))
# subset the data_counts to only include the above columns
data_counts_ko <- data_counts[, ko_columns]
head(data_counts_ko)
dds_generator <- function(read_counts, column_data, design_parameter, filter_low_counts = NULL) {
if (!is.character(design_parameter)) {
stop("'design_parameter' must be a character string representing the design formula.")
}
# validate design variables exist in column_data
design_vars <- unlist(strsplit(design_parameter, " \\+ | \\* "))
missing_vars <- setdiff(design_vars, colnames(column_data))
if (length(missing_vars) > 0) {
stop("The following design variables are missing in 'column_data': ", paste(missing_vars, collapse = ", "))
}
# convert design parameter input into formula
design_formula <- as.formula(paste("~", design_parameter))
# creating DESeq2 object
dds <- DESeqDataSetFromMatrix(countData = read_counts,
colData = column_data,
design = design_formula)
# remove low gene counts only if a filtering threshold is specified
if (!is.null(filter_low_counts) && is.numeric(filter_low_counts) && filter_low_counts > 0) {
keep_counts <- rowSums(counts(dds)) >= filter_low_counts
dds <- dds[keep_counts,]
}
return(dds)
}
dds_treatment <- dds_generator(data_counts, colData, "group", 10)
# set reference level: group to wt_0
dds_treatment$group <- relevel(dds_treatment$group, ref = "wt_0")
dds_treatment
dds_controls <- dds_generator(data_counts_controls, colData_controls, "genotype", 10)
# set reference level: genotype to wild_type
dds_controls$genotype <- relevel(dds_controls$genotype, ref = "wild_type")
dds_controls
dds_wt <- dds_generator(data_counts_wt, colData_wt, "treatment", 10)
# set reference level: treatment to 0
dds_wt$treatment <- relevel(dds_wt$treatment, ref = "0")
dds_wt
dds_ko <- dds_generator(data_counts_ko, colData_ko, "treatment", 10)
# set reference level: treatment to 0
dds_ko$treatment <- relevel(dds_ko$treatment, ref = "0")
dds_ko
coef_shrinkage_contrast <- function(dds_object, column, level_1, priority_level_2, output_dir = "../data/arabidopsis_deseq2_results/") {
# construct the expected coefficient name
coef_name <- paste0(column, "_", level_1, "_vs_", priority_level_2)
# ensure the coefficient exists
dds_name <- deparse(substitute(dds_object))  # grab the object's name as a string
if (!(coef_name %in% resultsNames(dds_object))) {
stop(paste("Coefficient", coef_name, "not found in object", dds_name, ". Check resultsNames(", dds_name, ")."))
}
# apply shrinkage using apeglm
shrink_result <- lfcShrink(dds_object, coef = coef_name, type = "apeglm")
# convert the shrinkage results to a data frame
result_df <- as.data.frame(shrink_result)
# add the gene IDs as a column in the data frame
result_df$GeneID <- rownames(result_df)
# re-order columns to place GeneID as the first column
result_df <- result_df[, c("GeneID", colnames(result_df)[-ncol(result_df)])]
# get the name of the dds_object (used for output_file name)
dds_name <- deparse(substitute(dds_object))
# generate dynamic output file name
output_file <- paste0(output_dir, "deseq2_", dds_name, "_", level_1, "_vs_", priority_level_2, ".csv")
# write output to a CSV file
write.csv(result_df, output_file, row.names = FALSE)
}
ashr_shrinkage_contrast <- function(dds_object, column, level_1, priority_level_2, output_dir = "../data/arabidopsis_deseq2_results/") {
# ensure the contrast levels exist
dds_name <- deparse(substitute(dds_object))  # grab the object's name as a string
factor_levels <- levels(colData(dds_object)[[column]])  # Get levels of the specified column
# check whether the levels exist in the factor column
if (!(level_1 %in% factor_levels) | !(priority_level_2 %in% factor_levels)) {
stop(paste("Levels", level_1, "or", priority_level_2, "not found in column", column, "of object", dds_name, ". Check levels(colData(",
dds_name, ")[[", column, "]])."))
}
# apply shrinkage using ashr and contrast
shrink_result <- lfcShrink(dds_object, contrast = c(column, level_1, priority_level_2), type = "ashr")
# convert the shrinkage results to a data frame
result_df <- as.data.frame(shrink_result)
# add the gene IDs as a column in the data frame
result_df$GeneID <- rownames(result_df)
# re-order columns to place GeneID as the first column
result_df <- result_df[, c("GeneID", colnames(result_df)[-ncol(result_df)])]
# generate dynamic output file name
output_file <- paste0(output_dir, "deseq2_", dds_name, "_", level_1, "_vs_", priority_level_2, ".csv")
# write output to a CSV file
write.csv(result_df, output_file, row.names = FALSE)
}
# run the differential gene expression analysis
dds_treatment <- DESeq(dds_treatment)
# view what conditions were contrasted to make sure they match what we actually meant to compare
resultsNames(dds_treatment)
# store the results in an object
res_dds_treatment <- results(dds_treatment)
# view DESeq2 results
res_dds_treatment
# summary results of res_dds_treatment (with re-level of group = wt_0)
summary(res_dds_treatment)
ashr_shrinkage_contrast(dds_treatment, "group", "ko_20", "wt_20")
ashr_shrinkage_contrast(dds_treatment, "group", "ko_40", "wt_40")
ashr_shrinkage_contrast(dds_treatment, "group", "ko_60", "wt_60")
ashr_shrinkage_contrast(dds_treatment, "group", "ko_80", "wt_80")
# run the differential gene expression analysis
dds_controls <- DESeq(dds_controls)
# view what conditions were contrasted to make sure they match what we actually meant to compare
resultsNames(dds_controls)
# store the results in an object
res_dds_controls <- results(dds_controls)
# view DESeq2 results
res_dds_controls
# summary results of res_dds_controls (with re-level of genotype = wild_type)
summary(res_dds_controls)
coef_shrinkage_contrast(dds_controls, "genotype", "knockout_line", "wild_type")
# run the differential gene expression analysis
dds_wt <- DESeq(dds_wt)
# view what conditions were contrasted to make sure they match what we actually meant to compare
resultsNames(dds_wt)
# store the results in an object
res_dds_wt <- results(dds_wt)
# view DESeq2 results
res_dds_wt
# summary results of res_dds_wt (with re-level of treatment = 0 for wild_type)
summary(res_dds_wt)
coef_shrinkage_contrast(dds_wt, "treatment", "20", "0")
coef_shrinkage_contrast(dds_wt, "treatment", "40", "0")
coef_shrinkage_contrast(dds_wt, "treatment", "60", "0")
coef_shrinkage_contrast(dds_wt, "treatment", "80", "0")
# run the differential gene expression analysis
dds_ko <- DESeq(dds_ko)
# view what conditions were contrasted to make sure they match what we actually meant to compare
resultsNames(dds_ko)
# store the results in an object
res_dds_ko <- results(dds_ko)
# view DESeq2 results
res_dds_ko
# summary results of res_dds_ko (with re-level of treatment = 0 for knockout_line)
summary(res_dds_ko)
coef_shrinkage_contrast(dds_ko, "treatment", "20", "0")
coef_shrinkage_contrast(dds_ko, "treatment", "40", "0")
coef_shrinkage_contrast(dds_ko, "treatment", "60", "0")
coef_shrinkage_contrast(dds_ko, "treatment", "80", "0")
